[{"path":"/articles/apm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to the `apm` Package","text":"apm package implements Averaged Prediction Models (APM), Bayesian model averaging approach controlled pre-post designs. designs compare differences time group becomes exposed (treated group) one remains unexposed (comparison group). appropriate causal assumptions, can identify causal effect exposure/treatment. APM, specify collection models predict untreated outcomes. causal identifying assumption model’s prediction errors equal (expectation) treated comparison groups absence exposure. generalization familiar methods like Difference--Differences () Comparative Interrupted Time Series (CITS). many models may plausible prediction task, combine using Bayesian model averaging. weight model robustness violations causal assumption.","code":""},{"path":"/articles/apm.html","id":"methodology-overview","dir":"Articles","previous_headings":"","what":"Methodology Overview","title":"Introduction to the `apm` Package","text":"identification framework begins prediction correction steps. First, train model pre-intervention data predict untreated outcomes post-intervention period. , correct treated group’s predictions using comparison group’s post-intervention prediction errors, adjusts shared time-varying shocks. identifying assumption , without policy change, prediction errors equal (expectation) across treated comparison groups. specify collection plausible models prediction task compare across using robustness causal assumption. Specifically, quantify model’s differential prediction errors (.e., differences treated untreated group’s prediction errors) series pre-intervention validation periods. Taking max summary across periods, consider models smaller maximum differential prediction errors robust. apply Bayesian model averaging (BMA), weighting model posterior probability robust. Taking “informal Bayesian approach”, sample model parameters quasi-posterior (Gelman Hill 2006, 140). multivariate Normal distribution mean equal estimated parameters fitted models variance-covariance matrix incorporates across-model correlations. parameter draw, compute models’ differential prediction errors take max validation periods. model’s weight proportion draws minimizes maximum differential prediction error (.e., robust). Finally, using corrected predictions averaged model, estimate average treatment effect treated (ATT). inference, apply fractional weighted bootstrap (Xu et al. 2020). takes account uncertainty models’ performance, uncertainty BMA weights , computationally infeasible. Following Antonelli, Papadogeorgou, Dominici (2022), estimate overall variance sum two components: (1) sampling variance fixed model uncertainty (2) model uncertainty variance fixed sampling uncertainty. Finally, can also perform causal sensitivity analyses scaling models’ maximum differential prediction error validation periods factor MM. enables sensitivity measures : constructing sensitivity bounds particular MM Manski Pepper (2018) Rambachan Roth (2023) finding value MM reverse sign causal effect finding value MM lead confidence interval include 0 package implements APM methods via three key functions: apm_mod() constructs candidate models can predict untreated outcomes treated comparison groups. apm_pre() fits candidate models pre-treatment validation data generates BMA weights model. apm_est() estimates ATT, given BMA weights, constructs statistical causal bounds around .","code":""},{"path":"/articles/apm.html","id":"example-estimating-the-effect-of-missouris-gun-policy-change","dir":"Articles","previous_headings":"","what":"Example: Estimating the Effect of Missouri’s Gun Policy Change","title":"Introduction to the `apm` Package","text":"example, apply APM estimate effect Missouri’s 2007 repeal permit--purchase law gun homicide rates (Webster, Crifasi, Vernick 2014; Hasegawa, Webster, Small 2019).","code":"library(apm)"},{"path":"/articles/apm.html","id":"load-example-data","dir":"Articles","previous_headings":"Example: Estimating the Effect of Missouri’s Gun Policy Change","what":"Load Example Data","title":"Introduction to the `apm` Package","text":"package provides example dataset pre- post-policy homicide rates: dataset includes: state: State name year: Year observation deaths: number gun homicide deaths crude_rate: Gun homicide rate per 100,000 age_adj_rate: Gun homicide rate per 100,000 adjusted age group: Indicator Missouri (1 = Missouri, 0 = comparison group) treat: Indicator Missouri post-treatment year (2008+) (1 = treated, 0 = untreated) Note observations year == 2008 average state’s observations post-treatment periods (2008 - 2016).","code":"data(\"ptpdata\", package = \"apm\")  # Inspect the dataset head(ptpdata) ##      state year deaths crude_rate age_adj_rate group treat ## 1 Arkansas 1994    205        8.2          8.2     0     0 ## 2 Arkansas 1995    212        8.4          8.4     0     0 ## 3 Arkansas 1996    164        6.4          6.4     0     0 ## 4 Arkansas 1997    196        7.5          7.6     0     0 ## 5 Arkansas 1998    155        5.9          6.0     0     0 ## 6 Arkansas 1999    118        4.4          4.5     0     0"},{"path":"/articles/apm.html","id":"define-candidate-models","dir":"Articles","previous_headings":"Example: Estimating the Effect of Missouri’s Gun Policy Change","what":"Define Candidate Models","title":"Introduction to the `apm` Package","text":"APM supports range model options: formula_list: list model formulas outcome left-hand side predictors right-hand side, e.g., formula_list = crude_rate ~ 1. family: list family specifications passed stats::glm() fitting models apm_pre(); \"negbin\" can also supplied request negative binomial model log link fit using MASS::glm.nb(). see list family specifications, run ?family. lag: vector integers outcome lags used predictors. example, lag = 3 means include lag-1, lag-2, lag-3 outcomes predictors. Default 0 (lags). diff_k: vector integers indicating outcome lags used offsets. example, diff_k = 1 means prior time point’s outcome included offset, equivalent using outcome minus corresponding lag model’s outcome. Default 0 lags. models diff_k value less lag value removed automatically. used family log link, lags automatically log-transformed; apm_pre() return error non-positive values present outcome. log: logical vector indicating whether outcome log-transformed. Default FALSE use original outcome. lag diff_k greater 0, outcome lags also log-transformed TRUE. family log link diff_k greater 0, lag offset log transformed. time_trend: vector integers indicating powers included time trend. example, time_trend = 2 means include predictors time variable square. value 0 (default) means continuous time included predictor. fixef: logical vector indicating whether include unit fixed effects predictors. Default FALSE. lists model options combined factorially create collection candidate models. example, specify two options lags (lag lag-1), two options outcome differences (offset immediate prior outcome), two options outcome scale (original log transformed), two options time trends (time trend linear time trend), get set candidate models: produces 12 candidate models, use \"gaussian\" family (identity link function). fewer full factorial combination embedded logic combining outcome differences lags (see ).","code":"models <- apm_mod(formula_list = crude_rate ~ 1,                   family = \"gaussian\",                   lag = 0:1,                   diff_k = 0:1,                   log = c(TRUE, FALSE),                   time_trend = 0:1,                   fixef = TRUE)"},{"path":"/articles/apm.html","id":"fit-candidate-models-to-pre-treatment-data","dir":"Articles","previous_headings":"Example: Estimating the Effect of Missouri’s Gun Policy Change","what":"Fit Candidate Models to Pre-Treatment Data","title":"Introduction to the `apm` Package","text":"now fit 12 models pre-treatment data. model pre-treatment validation period, compute observed difference average prediction errors treated comparison groups. differences average prediction errors, compute Bayesian model averaging (BMA) weights eventually passed apm_est() estimation average effect treatment treated (ATT). function apm_pre() model fitting. requires data frame contains group indicator variable time variable. specify 1999:2007 validation years model . validation year’s fit based data prior year. Therefore, set first validation period 1999 even first validation year, can train models five years data (.e., 1994:1998). specify number quasi-posterior draws using nsim = 1000 argument; draws gives better approximation model posterior, can slow computation. can view largest average differential prediction error model BMA weights given model using summary() returned object: can plot simulation-based posterior distribution model robust. probabilities proportions simulations model winner. Bayesian Model Averaging (BMA) Weights Model Selection. can see differential prediction errors model year. , winning model highlighted: model includes lag-1 outcome predictor log-transforms outcome. maximum differential prediction error observed 2005.  plot shows predictions model validation period. observed outcomes displayed points predicted outcomes lines.  Finally, can also show winning model’s corrected predictions, , incorporating prediction error control group  observe corrected predictions, can set type = \"corrected\", prediction treated group, corrected comparison group’s prediction error.","code":"# Set seed for reproducibility: ensures random sampling from  # multivariate Normal produces same results each time code is run set.seed(098556947) fits <- apm_pre(models = models,                 data = ptpdata,                 group_var = \"group\",                 time_var = \"year\",                 unit_var = \"state\",                 val_times = 1999:2007,                 nsim = 1000) summary(fits) ##                                   BMA weights Max|errors|   ## FE (log)                                0.000       0.826   ## AR(1) + FE (log)                        0.960       0.584 * ## FE (log, 1st diff)                      0.000       0.874   ## FE                                      0.000       0.850   ## AR(1) + FE                              0.038       0.630   ## FE (1st diff)                           0.000       0.997   ## linear trend + FE (log)                 0.000       0.988   ## linear trend + AR(1) + FE (log)         0.000       0.933   ## linear trend + FE (log, 1st diff)       0.000       1.207   ## linear trend + FE                       0.002       1.102   ## linear trend + AR(1) + FE               0.000       0.719   ## linear trend + FE (1st diff)            0.000       1.264   ##  ## Use `plot()` to plot prediction errors and BMA weights. plot(fits, type = \"weights\") plot(fits, type = \"errors\") plot(fits, type = \"predict\") plot(fits, type = \"corrected\")"},{"path":"/articles/apm.html","id":"estimation-and-inference","dir":"Articles","previous_headings":"Example: Estimating the Effect of Missouri’s Gun Policy Change","what":"Estimation and Inference","title":"Introduction to the `apm` Package","text":"estimate ATT conduct inference, feed output call apm_pre() apm_est(). M argument sensitivity parameter set identification, default set M = 0. M set value greater 0, apm_est() return estimates lower upper bounds ATT. bounds can incorporate uncertainty due possible causal violations sampling uncertainty. R argument number bootstrap iterations used estimate sampling variance, holding model uncertainty fixed. examine estimates uncertainty bounds, run following. level = 0.95 argument specifies statistical confidence level; ignore sampling uncertainty, set level = 0. standard error square root sum two variances: (1) estimated sampling variance holding model uncertainty fixed (2) estimated model uncertainty variance holding sampling uncertainty fixed. ATT row, CI low CI high outputs lower upper confidence bounds ATT. CI low output M = 1 row lower confidence bound ATT’s lower sensitivity bound. CI high output M = 1 row upper confidence bound ATT’s upper sensitivity bound. figure shows estimated ATT model plotted maximum absolute difference average prediction errors model. model smallest maximum absolute difference average prediction errors displayed red. size points correspond BMA weights. Small variation ATT estimates (y axis) across values maximum absolute differences prediction errors (x axis) suggests face stark trade-model plausibility robustness.","code":"est <- apm_est(fits = fits,                post_time = 2008,                M = 1,                R = 1000,                all_models = TRUE) summary(est, level = 0.95) ##       Estimate Std. Error CI low CI high z_value Pr(>|z|)     ## ATT     1.1431     0.1224 0.9031  1.3830   9.337   <2e-16 *** ## M = 1        .          . 0.1380  2.0187       .        .     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 plot(est)"},{"path":"/articles/apm.html","id":"sensitivity-analysis","dir":"Articles","previous_headings":"Example: Estimating the Effect of Missouri’s Gun Policy Change","what":"Sensitivity Analysis","title":"Introduction to the `apm` Package","text":"can also apply sensitivity analysis increasing values M. example, estimate ATT’s bounds values M 1 2 increments 0.25. output shows 95% confidence interval ATT’s lower bound excludes 0 M = 1.25, M = 1.5. find exact changepoint value M, can run following. can also run robustness_bound() level level = 0, give us value M sensitivity bound (statistical confidence bounds) begin bracket 0. expect, changepoint value M greater level = 0.","code":"summary(est, M = seq(from = 1, to = 2, by = 0.25)) ##          Estimate Std. Error  CI low CI high z_value Pr(>|z|)     ## ATT        1.1431     0.1224  0.9031  1.3830   9.337   <2e-16 *** ## M = 1           .          .  0.1380  2.0187       .        .     ## M = 1.25        .          . -0.0666  2.2117       .        .     ## M = 1.5         .          . -0.2732  2.4107       .        .     ## M = 1.75        .          . -0.4814  2.6137       .        .     ## M = 2           .          . -0.6906  2.8193       .        .     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 robustness_bound(est, level = 0.95) ## [1] 1.168991 robustness_bound(est, level = 0) ## [1] 1.948426"},{"path":"/articles/apm.html","id":"interpretation-of-results","dir":"Articles","previous_headings":"","what":"Interpretation of Results","title":"Introduction to the `apm` Package","text":"BMA point estimate (M = 0) 1.14, standard error 0.12, yielding 95% confidence interval [0.9, 1.38]. suggests Missouri’s repeal permit--purchase law increased state’s gun homicide rate 0.9 1.38 per 100,000 people. Given Missouri’s 2007 homicide rate 4.5 per 100,000 people, estimated increase 1.14 represents 25% rise. changepoint value M BMA estimator 1.95. , differential prediction errors nearly twice seen validation periods, point estimate longer indicate increase gun homicide rate. Additionally, lower bound estimator’s 95% confidence interval includes zero M reaches 1.17. , multiplier differential prediction errors seen validation period, statistical uncertainty bounds around effect estimate begin include 0.","code":""},{"path":"/articles/apm.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to the `apm` Package","text":"apm R package implements Averaged Prediction Models (APM), unified framework causal inference controlled pre-post settings. APM generalizes broad class prediction-based methods combining outcome prediction error correction using comparison group. package also incorporates Bayesian Model Averaging select robust model based pre-period data. application Missouri’s 2007 permit--purchase law repeal, results suggest lagged dependent variable model unit fixed effects log scale robust choice, leading estimated increase 1.14 homicides per 100,000 people. Sensitivity analysis indicates estimated effect indistinguishable zero, assumption violations need exceed 1.95 times worst pre-period discrepancies, compared low 0.79 single-model approaches. Built unified identification framework, APM offers flexible, data-driven approach causal inference controlled pre-post settings. apm package prioritizes model averaging robustness assuming single “correct” model efficiently accounting sampling model uncertainty. ensures researchers can achieve greater flexibility model selection maintaining rigorous principled inference. details, see: GitHub Repository Paper APM Methodology","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Leavitt. Author. Laura Hatfield. Author. Noah Greifer. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leavitt T, Hatfield L, Greifer N (2025). apm: Averaged Prediction Models. R package version 0.1.0, https://github.com/tl2624/apm.","code":"@Manual{,   title = {apm: Averaged Prediction Models},   author = {Thomas Leavitt and Laura Hatfield and Noah Greifer},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/tl2624/apm}, }"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Averaged Prediction Models","text":"apm package implements Averaged Prediction Models (APM), Bayesian model averaging approach controlled pre-post designs. designs compare differences time group becomes exposed (treated group) one remains unexposed (comparison group). appropriate causal assumptions, can identify causal effect exposure/treatment. APM, specify collection models predict untreated outcomes. causal identifying assumption model’s prediction errors equal (expectation) treated comparison groups absence exposure. generalization familiar methods like Difference--Differences () Comparative Interrupted Time Series (CITS). many models may plausible prediction task, combine using Bayesian model averaging. weight model robustness violations causal assumption.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Averaged Prediction Models","text":"install development version GitHub, use: See vignette(\"apm\") details using package.","code":"# Install devtools if not already installed install.packages(\"remotes\")  # Install apm package from GitHub if not already installed remotes::install_github(\"tl2624/apm\")"},{"path":"/reference/apm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"apm: Averaged Prediction Models — apm-package","title":"apm: Averaged Prediction Models — apm-package","text":"panel data settings, specifies set candidate models, fits data pre-treatment validation periods, selects model average candidate models, weighting posterior probability robust given differential average prediction errors pre-treatment validation periods. Subsequent estimation inference causal effect's bounds accounts model sampling uncertainty, calculates robustness changepoint value bounds go excluding including 0. Package also includes range diagnostic plots, illustrating models' differential average prediction errors posterior distribution model robust.","code":""},{"path":[]},{"path":"/reference/apm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"apm: Averaged Prediction Models — apm-package","text":"Maintainer: Noah Greifer ngreifer@iq.harvard.edu (ORCID) Authors: Thomas Leavitt thomas.leavitt@baruch.cuny.edu (ORCID) Laura Hatfield hatfield@hcp.med.harvard.edu (ORCID)","code":""},{"path":"/reference/apm_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate ATTS from models fits — apm_est","title":"Estimate ATTS from models fits — apm_est","text":"apm_est() computes ATTs models previously fit apm_pre(), choosing optimal one minimizing largest absolute average prediction error across validation times. Optionally, process can simulated arrive distribution ATTs accounts uncertainty selecting optimal model. plot() plots resulting ATT(s).","code":""},{"path":"/reference/apm_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate ATTS from models fits — apm_est","text":"","code":"apm_est(   fits,   post_time,   M = 0,   R = 1000L,   all_models = FALSE,   cl = NULL,   verbose = TRUE,   ... )  # S3 method for class 'apm_est' summary(object, level = 0.95, M = NULL, ...)  # S3 method for class 'apm_est' plot(x, label = TRUE, size.weights = TRUE, ...)"},{"path":"/reference/apm_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate ATTS from models fits — apm_est","text":"fits apm_pre_fits object; output call apm_pre(). post_time value time variable considered post-treatment, ATT estimated. M sensitivity parameter set identification. apm_est(), default 0, .e., point identification. summary(), can set one positive values produce uncertainty bounds value. allowed set 0 call apm_est(). See Details. R number bootstrap iterations used compute sampling variance ATT. Default 1000. better takes longer. all_models logical; whether compute ATTs models (TRUE) just BMA weights greater 0 (FALSE, default). effect final estimates leaving FALSE can speed computation models BMA weights 0. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. can also \"future\" use future backend. NULL (default) refers sequential evaluation. See cl argument pbapply::pblapply() details. verbose logical; whether print information progress estimation, including progress bar. Default TRUE. ... ignored. level desired confidence level. Set 0 ignore sampling variation computing interval bounds. Default .95. x, object apm_est object; output call apm_est(). label logical; whether label ATT estimates. Requires ggrepel installed. Default TRUE. size.weights logicsl; whether size points based BMA weights. Default TRUE.","code":""},{"path":"/reference/apm_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate ATTS from models fits — apm_est","text":"apm_est() returns apm_est object, contains ATT estimates variance estimates. following components included: BMA_att BMA-weighted ATT atts matrix containing ATT estimates model (all_models = FALSE, models positive BMA weights included) BMA_var total variance estimate BMA-weighted ATT incorporating variance due sampling due model selection BMA_var_b bootstrap-based component variance estimate BMA-weighted ATT due sampling BMA_var_m component variance estimate BMA-weighted ATT due model selection M value sensitivity parameter M post_time value supplied post_time pred_errors matrix containing difference average prediction errors model pre-treatment validation period BMA_weights BMA weights computed apm_pre() (all_models = FALSE, positive BMA weights included) boot_out fwb object containing bootstrap results plot() returns ggplot object displaying ATT model plotted maximum absolute difference average prediction errors model. model lowest maximum absolute difference average prediction errors displayed red. summary() produces table BMA-weighted ATT, estimated standard error, confidence interval limits. M greater 0, additional rows value M included lower upper bound. level greater 0, bounds include uncertainty due sampling model selection; otherwise, correspond set identification bounds ATT.","code":""},{"path":"/reference/apm_est.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate ATTS from models fits — apm_est","text":"apm_est() estimates ATT model combines form BMA-weighted estimate ATT. Uncertainty BMA-weighted ATT computed combining two variance components, one account sampling another accounts model selection. component due sampling computed bootstrapping process fitting outcome model post-treatment outcome identified post_time computing difference observed outcome mean difference model-predicted outcome mean difference. fractional weighted bootstrap implemented fwb::fwb() used ensure units dropped analysis. bootstrap sample, BMA-weighted ATT estimate computed weighted average ATTs computed models using fixed BMA weights computed apm_pre(), variance computed empirical variance bootstrapped estimates. variance component due model selection computed BMA-weighted variance original ATTs. M greater 0, bounds set identification uncertainty additionally computed. involves bootstrapping fitting pre-period models along post-treatment models order compute maximum absolute difference average prediction errors model across validation periods. bootstrap sample produces margin error model computed \\(M \\times \\delta_m\\) \\(\\delta_m\\) maximum absolute difference average prediction errors model \\(m\\). Upper lower bounds set-identified BMA-weighted ATT computed \\(\\text{ATT}_m \\pm M \\times \\delta_m\\). procedure used compute variance bounds. summary() displays BMA-weighted ATT estimate, standard error, Wald confidence intervals. M greater 0, bounds set-identified ATT displayed confidence interval bound columns. lower bound computed \\(\\text{LB} - \\sigma_{LB}Z_{l}\\) upper bound \\(\\text{UB} + \\sigma_{UB}Z_{l}\\), \\(\\text{LB}\\) \\(\\text{UB}\\) lower upper bounds, \\(\\sigma_{LB}\\) \\(\\sigma_{UB}\\) variances accounting sampling model selection, \\(Z_{l}\\) critical Z-statistic confidence level \\(l\\). display set-identification bounds , one set level = 0.","code":""},{"path":[]},{"path":"/reference/apm_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate ATTS from models fits — apm_est","text":"","code":"data(\"ptpdata\")  # Combination of 4 models: 2 time trends, 2 lags models <- apm_mod(list(crude_rate ~ 1),                    lag = 0:1,                    time_trend = 0:1) models #> - Model 1: baseline mean #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 2: AR(1) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 3: linear trend #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no #>  #> - Model 4: linear trend + AR(1) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no  # Fit the models to data; unit_var must be supplied for # fixed effects fits <- apm_pre(models,                  data = ptpdata,                  group_var = \"group\",                  time_var = \"year\",                  val_times = 2004:2007,                  unit_var = \"state\",                  nsim = 100) #> Fitting models... Done. #> Simulating to compute BMA weights... #>    |                                                  | 0 % ~calculating     |+                                                 | 1 % ~00s             |+                                                 | 2 % ~00s             |++                                                | 3 % ~00s             |++                                                | 4 % ~00s             |+++                                               | 5 % ~00s             |+++                                               | 6 % ~00s             |++++                                              | 7 % ~00s             |++++                                              | 8 % ~00s             |+++++                                             | 9 % ~00s             |+++++                                             | 10% ~00s             |++++++                                            | 11% ~00s             |++++++                                            | 12% ~00s             |+++++++                                           | 13% ~00s             |+++++++                                           | 14% ~00s             |++++++++                                          | 15% ~00s             |++++++++                                          | 16% ~00s             |+++++++++                                         | 17% ~00s             |+++++++++                                         | 18% ~00s             |++++++++++                                        | 19% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++                                       | 22% ~00s             |++++++++++++                                      | 23% ~00s             |++++++++++++                                      | 24% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++                                     | 26% ~00s             |++++++++++++++                                    | 27% ~00s             |++++++++++++++                                    | 28% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++                                  | 31% ~00s             |++++++++++++++++                                  | 32% ~00s             |+++++++++++++++++                                 | 33% ~00s             |+++++++++++++++++                                 | 34% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++                                | 36% ~00s             |+++++++++++++++++++                               | 37% ~00s             |+++++++++++++++++++                               | 38% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++                             | 41% ~00s             |+++++++++++++++++++++                             | 42% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++                            | 44% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++                           | 46% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |++++++++++++++++++++++++                          | 48% ~00s             |+++++++++++++++++++++++++                         | 49% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++                        | 51% ~00s             |++++++++++++++++++++++++++                        | 52% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++                      | 56% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++                     | 58% ~00s             |++++++++++++++++++++++++++++++                    | 59% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++                   | 62% ~00s             |++++++++++++++++++++++++++++++++                  | 63% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++                 | 66% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |+++++++++++++++++++++++++++++++++++               | 69% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++              | 72% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |+++++++++++++++++++++++++++++++++++++             | 74% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++            | 76% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 77% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 81% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 97% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 98% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 99% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Done.  est <- apm_est(fits,                 post_time = 2008,                 M = 1,                 R = 20) #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s    est #> An `apm_est` object #>  #>  - grouping variable: group #>  - unit variable: state #>  - time variable: year #>    - validation times:  #>    - post-treatment time: 2008 #>  - sensitivity parameter (M): 1 #>  - bootstrap replications: 20 #>  #> Use `summary()` or `plot()` to examine estimates and uncertainty bounds.  # ATT estimate and bounds for M = 1 summary(est) #>       Estimate Std. Error  CI low CI high z_value Pr(>|z|)     #> ATT     1.0305     0.1745  0.6884  1.3726   5.904 3.55e-09 *** #> M = 1        .          . -0.1331  2.5279       .        .     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # Bounds for other values of M summary(est, M = c(.5, 1, 1.5, 2)) #>         Estimate Std. Error  CI low CI high z_value Pr(>|z|)     #> ATT       1.0305     0.1745  0.6884  1.3730   5.904 3.55e-09 *** #> M = 0.5        .          .  0.3839  1.9270       .        .     #> M = 1          .          . -0.1331  2.5280       .        .     #> M = 1.5        .          . -0.7242  3.1420       .        .     #> M = 2          .          . -1.3353  3.7620       .        .     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # Set-ID bounds without uncertainty summary(est, level = 0) #>       Estimate Std. Error CI low CI high z_value Pr(>|z|)     #> ATT     1.0305     0.1745 1.0305  1.0305   5.904 3.55e-09 *** #> M = 1        .          . 0.3368  1.7242       .        .     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  plot(est)"},{"path":"/reference/apm_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate models used to fit outcomes — apm_mod","title":"Generate models used to fit outcomes — apm_mod","text":"apm_mod() generates list models characterized basic model formulas options (e.g., lags, families, etc.) supplied apm_pre(). values completely crossed create grid model specifications, multiple sets model specifications can combined using c() (see Examples).","code":""},{"path":"/reference/apm_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate models used to fit outcomes — apm_mod","text":"","code":"apm_mod(   formula_list,   family = \"gaussian\",   lag = 0L,   diff_k = 0L,   log = FALSE,   time_trend = 0L,   fixef = FALSE,   identiy_only_log = TRUE )"},{"path":"/reference/apm_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate models used to fit outcomes — apm_mod","text":"formula_list list model formulas outcome left side predictions (just intercept) right side. family list family specifications; see family() allowable options. eventually passed glm() fitting models apm_pre(). \"negbin\" can also supplied request negative binomial model log link fit using MASS::glm.nb(). Default \"gaussian\" specify linear model. lag vector integers indicating desired outcome lags used predictors. example, lag value 3 means outcome lagged , twice, three times included predictors. Default 0 lags. diff_k vector integers indicating desired outcome lag used offset example, diff_k value 1 means prior time point's outcome included offset, equivalent using outcome minus corresponding lag outcome corresponding model. Default 0 lags. models diff_k value less lag value removed automatically. used family log link, lags automatically log-transformed; error thrown apm_pre() nonpositive values present outcome. log logical vector indicating whether outcome log-transformed. Default FALSE use original outcome. lag diff_k greater 0, outcome lags also log-transformed TRUE. family log link diff_k greater zero, lag offset log transformed. time_trend vector integers indicating desired powers included time trend. example, time_trend value 2 means time variable square included predictors model. value 0 (default) means time included predictor. fixef logical vector indicating whether unit fixed effects included predictors. Default FALSE omit unit fixed effects. identiy_only_log logical; whether omit models log TRUE link family specification corresponds something \"identity\". Default TRUE, probably changed.","code":""},{"path":"/reference/apm_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate models used to fit outcomes — apm_mod","text":"apm_models object, list containing full cross (less omitted combinations) model features specified arguments, combination list. print() method can combined using c(). model named automatically, can set manually using names() well. Models can removed setting value NULL; see Examples.","code":""},{"path":[]},{"path":"/reference/apm_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate models used to fit outcomes — apm_mod","text":"","code":"data(\"ptpdata\")  # Combination of 8 models: 1 baseline formulas, # 2 families, 2 lags, 2 time trends models1 <- apm_mod(crude_rate ~ 1,                     family = list(\"gaussian\", \"quasipoisson\"),                     time_trend = 0:1,                     lag = 0:1, fixef = TRUE) models1 #> - Model 1: FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 2: FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 3: AR(1) + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 4: AR(1) + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 5: linear trend + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 6: linear trend + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 7: linear trend + AR(1) + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 8: linear trend + AR(1) + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes  # Add a single other model with a square time trend models2 <- apm_mod(crude_rate ~ 1,                     family = \"gaussian\",                     time_trend = 2,                     fixef = FALSE) models2 #> - Model 1: quadratic trend #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: quadratic #> unit fixed effects: no  (models <- c(models1, models2)) #> - Model 1: FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 2: FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 3: AR(1) + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 4: AR(1) + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 5: linear trend + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 6: linear trend + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 7: linear trend + AR(1) + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 8: linear trend + AR(1) + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 9: quadratic trend (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: quadratic #> unit fixed effects: no  # Remove a model models[[4]] <- NULL models #> - Model 1: FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 2: FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 3: AR(1) + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: yes #>  #> - Model 4: linear trend + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 5: linear trend + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 6: linear trend + AR(1) + FE (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 7: linear trend + AR(1) + FE (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: yes #>  #> - Model 8: quadratic trend (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: quadratic #> unit fixed effects: no"},{"path":"/reference/apm_pre.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit validation models to pre-treatment data — apm_pre","title":"Fit validation models to pre-treatment data — apm_pre","text":"apm_pre() fits models pre-treatment data compute observed prediction errors model period compute Bayesian model averaging (BMA) weights eventually used apm_est() estimate treatment effect.","code":""},{"path":"/reference/apm_pre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit validation models to pre-treatment data — apm_pre","text":"","code":"apm_pre(   models,   data,   weights = NULL,   group_var,   time_var,   val_times,   unit_var,   nsim = 1000L,   cl = NULL,   verbose = TRUE )  # S3 method for class 'apm_pre_fits' summary(object, order = NULL, ...)"},{"path":"/reference/apm_pre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit validation models to pre-treatment data — apm_pre","text":"models apm_models object; output call apm_mod(). data dataset containing variables named supplied models (.e., outcome predictors) well variable named . weights optional vector weights (e.g., sampling weights) used fit weighted regression models. group_var string; name treatment variable data defining \"treated\" \"treated\" groups. corresponding variable take values 0 1 . time_var string; name variable data containing time variable. val_times numeric vector corresponding pre-treatment times used validation times select model optimal average expected prediction error. unit_var string; name unit ID variable data. nsim number simulated draws joint posterior fitted models use compute BMA weights. Default 1000. better takes longer. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. can also \"future\" use future backend. NULL (default) refers sequential evaluation. See cl argument pbapply::pblapply() details. verbose logical; whether print information progress estimation, including progress bar. Default TRUE. object apm_pre_fit object; output call apm_pre(). order order summary; NULL (default) ordering models supplied apm_pre(), \"weights\" orders models computed BMA weights highest weights top, \"errors\" orders models maximum absolute difference prediction errors smallest errors top. ... ignored.","code":""},{"path":"/reference/apm_pre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit validation models to pre-treatment data — apm_pre","text":"apm_pre() returns apm_pre_fits object, list containing models supplied models, grid fitted models, list model fit objects, list estimated coefficients, joint covariance coefficients, dataset supplied data, components supplied apm_pre(). summary() produces data frame containing BMA weights maximum absolute difference mean prediction errors model, ordered according order. asterisk appears next model smallest error.","code":""},{"path":"/reference/apm_pre.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit validation models to pre-treatment data — apm_pre","text":"apm_pre() creates grid models time points fits corresponding models. validation time supplied val_times, model fit using previous times. example, validation time 5, model fit data periods 1-4. lm(), glm(), MASS::glm.nb() used fit given models. joint covariance matrix coefficients computed using SUEST method described Mize et al. (2019, p164), also used STATA command suest. equivalent covariance matrix computed stacking score equations models fitting using M-estimation yields equivalent HC0 covariance matrix within-model covariances. covariance clustered unit_id. compute BMA weights, random variate drawn multivariate normal distribution nsim times mean vector equal concatenated model coefficients covariance equal joint covariance matrix described . iteration, absolute average prediction errors calculated model validation period. model considered \"winner\" largest absolute average prediction error across validation periods smallest among models. BMA weight model equal proportion iterations model \"winner\".","code":""},{"path":[]},{"path":"/reference/apm_pre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit validation models to pre-treatment data — apm_pre","text":"","code":"data(\"ptpdata\")  # Combination of 8 models: 2 baseline formulas, # 2 families, 2 lags models <- apm_mod(crude_rate ~ 1,                    family = list(\"gaussian\", \"quasipoisson\"),                    time_trend = 0:1,                    lag = 0:1) models #> - Model 1: baseline mean (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 2: baseline mean (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 3: AR(1) (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 4: AR(1) (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 5: linear trend (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no #>  #> - Model 6: linear trend (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no #>  #> - Model 7: linear trend + AR(1) (Gaussian) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no #>  #> - Model 8: linear trend + AR(1) (Quasipoisson) #> crude_rate ~ 1 #> family: quasipoisson(link = \"log\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no  # Fit the models to data fits <- apm_pre(models, data = ptpdata,                  group_var = \"group\",                  time_var = \"year\",                  val_times = 1999:2007,                  unit_var = \"state\") #> Fitting models... Done. #> Simulating to compute BMA weights... #>    |                                                  | 0 % ~calculating     |+                                                 | 1 % ~04s             |+                                                 | 2 % ~05s             |++                                                | 3 % ~04s             |++                                                | 4 % ~04s             |+++                                               | 5 % ~04s             |+++                                               | 6 % ~03s             |++++                                              | 7 % ~04s             |++++                                              | 8 % ~03s             |+++++                                             | 9 % ~03s             |+++++                                             | 10% ~03s             |++++++                                            | 11% ~03s             |++++++                                            | 12% ~03s             |+++++++                                           | 13% ~03s             |+++++++                                           | 14% ~03s             |++++++++                                          | 15% ~03s             |++++++++                                          | 16% ~03s             |+++++++++                                         | 17% ~03s             |+++++++++                                         | 18% ~03s             |++++++++++                                        | 19% ~03s             |++++++++++                                        | 20% ~03s             |+++++++++++                                       | 21% ~03s             |+++++++++++                                       | 22% ~03s             |++++++++++++                                      | 23% ~02s             |++++++++++++                                      | 24% ~02s             |+++++++++++++                                     | 25% ~02s             |+++++++++++++                                     | 26% ~02s             |++++++++++++++                                    | 27% ~02s             |++++++++++++++                                    | 28% ~02s             |+++++++++++++++                                   | 29% ~02s             |+++++++++++++++                                   | 30% ~02s             |++++++++++++++++                                  | 31% ~02s             |++++++++++++++++                                  | 32% ~02s             |+++++++++++++++++                                 | 33% ~02s             |+++++++++++++++++                                 | 34% ~02s             |++++++++++++++++++                                | 35% ~02s             |++++++++++++++++++                                | 36% ~02s             |+++++++++++++++++++                               | 37% ~02s             |+++++++++++++++++++                               | 38% ~02s             |++++++++++++++++++++                              | 39% ~02s             |++++++++++++++++++++                              | 40% ~02s             |+++++++++++++++++++++                             | 41% ~02s             |+++++++++++++++++++++                             | 42% ~02s             |++++++++++++++++++++++                            | 43% ~02s             |++++++++++++++++++++++                            | 44% ~02s             |+++++++++++++++++++++++                           | 45% ~02s             |+++++++++++++++++++++++                           | 46% ~02s             |++++++++++++++++++++++++                          | 47% ~02s             |++++++++++++++++++++++++                          | 48% ~02s             |+++++++++++++++++++++++++                         | 49% ~02s             |+++++++++++++++++++++++++                         | 50% ~02s             |++++++++++++++++++++++++++                        | 51% ~02s             |++++++++++++++++++++++++++                        | 52% ~01s             |+++++++++++++++++++++++++++                       | 53% ~01s             |+++++++++++++++++++++++++++                       | 54% ~01s             |++++++++++++++++++++++++++++                      | 55% ~01s             |++++++++++++++++++++++++++++                      | 56% ~01s             |+++++++++++++++++++++++++++++                     | 57% ~01s             |+++++++++++++++++++++++++++++                     | 58% ~01s             |++++++++++++++++++++++++++++++                    | 59% ~01s             |++++++++++++++++++++++++++++++                    | 60% ~01s             |+++++++++++++++++++++++++++++++                   | 61% ~01s             |+++++++++++++++++++++++++++++++                   | 62% ~01s             |++++++++++++++++++++++++++++++++                  | 63% ~01s             |++++++++++++++++++++++++++++++++                  | 64% ~01s             |+++++++++++++++++++++++++++++++++                 | 65% ~01s             |+++++++++++++++++++++++++++++++++                 | 66% ~01s             |++++++++++++++++++++++++++++++++++                | 67% ~01s             |++++++++++++++++++++++++++++++++++                | 68% ~01s             |+++++++++++++++++++++++++++++++++++               | 69% ~01s             |+++++++++++++++++++++++++++++++++++               | 70% ~01s             |++++++++++++++++++++++++++++++++++++              | 71% ~01s             |++++++++++++++++++++++++++++++++++++              | 72% ~01s             |+++++++++++++++++++++++++++++++++++++             | 73% ~01s             |+++++++++++++++++++++++++++++++++++++             | 74% ~01s             |++++++++++++++++++++++++++++++++++++++            | 75% ~01s             |++++++++++++++++++++++++++++++++++++++            | 76% ~01s             |+++++++++++++++++++++++++++++++++++++++           | 77% ~01s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~01s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~01s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~01s             |+++++++++++++++++++++++++++++++++++++++++         | 81% ~01s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~01s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~01s             |++++++++++++++++++++++++++++++++++++++++++        | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 97% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 98% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 99% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=03s   #> Done.  fits #> An `apm_pre_fits` object #>  #>  - grouping variable: group #>  - unit variable: state #>  - time variable: year #>    - validation times: 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007 #>  - number of models compared: 8 #>  - number of simulation iterations: 1000 #>  #> Use `summary()` or `plot()` to examine prediction errors and BMA weights.  summary(fits) #>                                     BMA weights Max|errors|   #> baseline mean (Gaussian)                  0.141       0.850   #> baseline mean (Quasipoisson)              0.134       0.850 * #> AR(1) (Gaussian)                          0.273       0.883   #> AR(1) (Quasipoisson)                      0.082       0.932   #> linear trend (Gaussian)                   0.078       1.102   #> linear trend (Quasipoisson)               0.183       0.953   #> linear trend + AR(1) (Gaussian)           0.038       1.113   #> linear trend + AR(1) (Quasipoisson)       0.071       1.308   #>  #> Use `plot()` to plot prediction errors and BMA weights.  plot(fits, type = \"weights\")   plot(fits, type = \"error\")"},{"path":"/reference/plot.apm_pre_fits.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot outputs of apm_pre() — plot.apm_pre_fits","title":"Plot outputs of apm_pre() — plot.apm_pre_fits","text":"plot() displays Bayesian model averaging (BMA) weights model (computed apm_fit() posterior probability selection) distribution difference average prediction errors.","code":""},{"path":"/reference/plot.apm_pre_fits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot outputs of apm_pre() — plot.apm_pre_fits","text":"","code":"# S3 method for class 'apm_pre_fits' plot(   x,   type = \"weights\",   abs = TRUE,   ncol = 4L,   clip_at = 15,   model = \".optimal\",   ... )"},{"path":"/reference/plot.apm_pre_fits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot outputs of apm_pre() — plot.apm_pre_fits","text":"x apm_pre_fits object; output call apm_pre(). type values plot: allowable options include \"weights\" plot BMA weights/posterior probabilities (default), \"errors\" plot difference average predictions errors models across validation periods, \"predict\" plot time series model predictions model, \"corrected\" plot corrected predictions treated group model. Abbreviations allowed. abs logical; type = \"errors\", whether plot differences average prediction errors absolute value (TRUE, default) (FALSE). ncol type \"errors\", \"predict\", \"corrected\", number columns use display plots. Default 4. clip_at type = \"errors\", value (robust z-score units) clip y-axis plot prevent outliers distorting . Default 15. Set Inf prevent clipping. model string; type = \"predict\" type = \"corrected\", model(s) plot. Allowable values include \".optimal\" plot model smallest maximum absolute difference average prediction errors, \".\" plot models (excluding BMA-weighted predictions), names one specific models. Abbreviations allowed. ... ignored.","code":""},{"path":"/reference/plot.apm_pre_fits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot outputs of apm_pre() — plot.apm_pre_fits","text":"ggplot object, can manipulated using ggplot2 syntax (loading ggplot2).","code":""},{"path":"/reference/plot.apm_pre_fits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot outputs of apm_pre() — plot.apm_pre_fits","text":"type = \"weights\", plot() displays bar plot bar model height equal BMA weight/posterior probability selection model. (Note plot margins can sometimes cut model names; use theme(plot.margins =) loading ggplot2 extend left margin plot ensure text visible. Alternatively, axis text can rotated using theme(axis.text.x =).) type = \"errors\", plot() displays lattice bar plots plot model displaying difference average prediction errors validation period. period largest difference average prediction errors shaded black. model smallest maximum absolute difference average prediction errors gray label. type = \"predict\", plot() displays lattice line plots plot model displaying observed predicted outcomes validation period model. observed outcomes displayed points, predicted outcomes displayed lines. type = \"corrected\", plot() displays lattice line plots plot model displaying observed corrected predictions treated group validation period model. observed outcomes displayed points, corrected predictions displayed lines. Corrected predictions computed observed outcome treated group minus prediction error treated group plus prediction error control group.","code":""},{"path":[]},{"path":"/reference/plot.apm_pre_fits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot outputs of apm_pre() — plot.apm_pre_fits","text":"","code":"data(\"ptpdata\")  # Combination of 8 models: 2 baseline formulas, # 2 families, 2 lags models <- apm_mod(crude_rate ~ 1,                    family = \"gaussian\",                    time_trend = 0:1,                    lag = 0:1,                    diff_k = 0:1) models #> - Model 1: baseline mean #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 2: AR(1) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 3: baseline mean (1st diff) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: 1 #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 4: linear trend #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no #>  #> - Model 5: linear trend + AR(1) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no #>  #> - Model 6: linear trend (1st diff) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: 1 #> log outcome: no #> time trend: linear #> unit fixed effects: no  # Fit the models to data fits <- apm_pre(models, data = ptpdata,                  group_var = \"group\",                  time_var = \"year\",                  val_times = 1999:2007,                  unit_var = \"state\",                  nsim = 50) #> Fitting models... Done. #> Simulating to compute BMA weights... #>    |                                                  | 0 % ~calculating     |+                                                 | 2 % ~00s             |++                                                | 4 % ~00s             |+++                                               | 6 % ~00s             |++++                                              | 8 % ~00s             |+++++                                             | 10% ~00s             |++++++                                            | 12% ~00s             |+++++++                                           | 14% ~00s             |++++++++                                          | 16% ~00s             |+++++++++                                         | 18% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++                                       | 22% ~00s             |++++++++++++                                      | 24% ~00s             |+++++++++++++                                     | 26% ~00s             |++++++++++++++                                    | 28% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++                                  | 32% ~00s             |+++++++++++++++++                                 | 34% ~00s             |++++++++++++++++++                                | 36% ~00s             |+++++++++++++++++++                               | 38% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++                             | 42% ~00s             |++++++++++++++++++++++                            | 44% ~00s             |+++++++++++++++++++++++                           | 46% ~00s             |++++++++++++++++++++++++                          | 48% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++                        | 52% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |++++++++++++++++++++++++++++                      | 56% ~00s             |+++++++++++++++++++++++++++++                     | 58% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++                   | 62% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++                 | 66% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++              | 72% ~00s             |+++++++++++++++++++++++++++++++++++++             | 74% ~00s             |++++++++++++++++++++++++++++++++++++++            | 76% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 98% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Done. fits #> An `apm_pre_fits` object #>  #>  - grouping variable: group #>  - unit variable: state #>  - time variable: year #>    - validation times: 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007 #>  - number of models compared: 6 #>  - number of simulation iterations: 50 #>  #> Use `summary()` or `plot()` to examine prediction errors and BMA weights.  plot(fits, type = \"weights\")   plot(fits, type = \"error\", ncol = 2)   plot(fits, type = \"predict\", model = \".optimal\")   plot(fits, type = \"corrected\", model = \".optimal\")"},{"path":"/reference/ptpdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset on Annual Homicide Rates — ptpdata","title":"Dataset on Annual Homicide Rates — ptpdata","text":"dataset homicide rates across 9 states 1994 2008. Missouri repealed permit--purchase (PTP) law 2007.","code":""},{"path":"/reference/ptpdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset on Annual Homicide Rates — ptpdata","text":"","code":"ptpdata"},{"path":"/reference/ptpdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset on Annual Homicide Rates — ptpdata","text":"dataframe 7 variables 135 observations (9 states, 15 years).","code":""},{"path":"/reference/ptpdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dataset on Annual Homicide Rates — ptpdata","text":"state name state; states present include Arkansas, Illinois, Iowa, Kansas, Kentucky, Missouri, Nebraska, Oklahoma, Tennessee. year year observation. Years range 1994 2008. deaths number homicide deaths corresponding state corresponding year. crude_rate homicide rate corresponding state corresponding year. age_adj_rate age-adjusted homicide rate corresponding state corresponding year. group whether observation belongs \"--treated\" group; 1 Missouri 0 states. treat whether observation treated; 1 Missouri 2008 0 otherwise.","code":"details for dataset2"},{"path":"/reference/robustness_bound.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the robustness changepoint — robustness_bound","title":"Compute the robustness changepoint — robustness_bound","text":"robustness_bound() computes value sensitivity parameter M robustness bounds change excluding including ATT 0.","code":""},{"path":"/reference/robustness_bound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the robustness changepoint — robustness_bound","text":"","code":"robustness_bound(object, level = 0.95)"},{"path":"/reference/robustness_bound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the robustness changepoint — robustness_bound","text":"object apm_est object; output call apm_est(). M must set nonzero value use robustness_bound(). level desired confidence level. Set 0 ignore sampling variation computing interval bounds. Default .95.","code":""},{"path":"/reference/robustness_bound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the robustness changepoint — robustness_bound","text":"single number corresponding changepoint value M. positive value M interval bounds cross 0, NA returned.","code":""},{"path":[]},{"path":"/reference/robustness_bound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the robustness changepoint — robustness_bound","text":"","code":"data(\"ptpdata\")  # Combination of 4 models: 2 time trends, 2 lags models <- apm_mod(list(crude_rate ~ 1),                    lag = 0:1,                    time_trend = 0:1) models #> - Model 1: baseline mean #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 2: AR(1) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: none #> unit fixed effects: no #>  #> - Model 3: linear trend #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: none #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no #>  #> - Model 4: linear trend + AR(1) #> crude_rate ~ 1 #> family: gaussian(link = \"identity\") #> outcome lag: 1 #> outcome diff: none #> log outcome: no #> time trend: linear #> unit fixed effects: no  # Fit the models to data; unit_var must be supplied for # fixed effects fits <- apm_pre(models,                  data = ptpdata,                  group_var = \"group\",                  time_var = \"year\",                  val_times = 2004:2007,                  unit_var = \"state\",                  nsim = 100) #> Fitting models... Done. #> Simulating to compute BMA weights... #>    |                                                  | 0 % ~calculating     |+                                                 | 1 % ~00s             |+                                                 | 2 % ~00s             |++                                                | 3 % ~00s             |++                                                | 4 % ~00s             |+++                                               | 5 % ~00s             |+++                                               | 6 % ~00s             |++++                                              | 7 % ~00s             |++++                                              | 8 % ~00s             |+++++                                             | 9 % ~00s             |+++++                                             | 10% ~00s             |++++++                                            | 11% ~00s             |++++++                                            | 12% ~00s             |+++++++                                           | 13% ~00s             |+++++++                                           | 14% ~00s             |++++++++                                          | 15% ~00s             |++++++++                                          | 16% ~00s             |+++++++++                                         | 17% ~00s             |+++++++++                                         | 18% ~00s             |++++++++++                                        | 19% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++                                       | 22% ~00s             |++++++++++++                                      | 23% ~00s             |++++++++++++                                      | 24% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++                                     | 26% ~00s             |++++++++++++++                                    | 27% ~00s             |++++++++++++++                                    | 28% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++                                  | 31% ~00s             |++++++++++++++++                                  | 32% ~00s             |+++++++++++++++++                                 | 33% ~00s             |+++++++++++++++++                                 | 34% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++                                | 36% ~00s             |+++++++++++++++++++                               | 37% ~00s             |+++++++++++++++++++                               | 38% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++                             | 41% ~00s             |+++++++++++++++++++++                             | 42% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++                            | 44% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++                           | 46% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |++++++++++++++++++++++++                          | 48% ~00s             |+++++++++++++++++++++++++                         | 49% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++                        | 51% ~00s             |++++++++++++++++++++++++++                        | 52% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++                      | 56% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++                     | 58% ~00s             |++++++++++++++++++++++++++++++                    | 59% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++                   | 62% ~00s             |++++++++++++++++++++++++++++++++                  | 63% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++                 | 66% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |+++++++++++++++++++++++++++++++++++               | 69% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++              | 72% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |+++++++++++++++++++++++++++++++++++++             | 74% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++            | 76% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 77% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 81% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 97% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 98% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 99% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   #> Done.  est <- apm_est(fits,                 post_time = 2008,                 M = 1,                 R = 20) #>    |                                                  | 0 % ~calculating     |+++                                               | 5 % ~00s             |+++++                                             | 10% ~00s             |++++++++                                          | 15% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s    est #> An `apm_est` object #>  #>  - grouping variable: group #>  - unit variable: state #>  - time variable: year #>    - validation times:  #>    - post-treatment time: 2008 #>  - sensitivity parameter (M): 1 #>  - bootstrap replications: 20 #>  #> Use `summary()` or `plot()` to examine estimates and uncertainty bounds.  # ATT estimate and bounds for M = 1 summary(est) #>       Estimate Std. Error  CI low CI high z_value Pr(>|z|)     #> ATT     1.0081     0.1572  0.7000  1.3162   6.413 1.43e-10 *** #> M = 1        .          . -0.1301  2.4250       .        .     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  #Changepoint value of M ignoring estimation uncertainty (M <- robustness_bound(est, level = 0)) #> [1] 1.558447  summary(est, level = 0, M = M) #>          Estimate Std. Error CI low CI high z_value Pr(>|z|)     #> ATT        1.0081     0.1572 1.0081  1.0081   6.413 1.43e-10 *** #> M = 1.56        .          . 0.0000  2.0162       .        .     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  #Changepoint value of M accounting for estimation uncertainty (M <- robustness_bound(est, level = .95)) #> [1] 0.8828782  summary(est, level = .95, M = M) #>          Estimate Std. Error CI low CI high z_value Pr(>|z|)     #> ATT        1.0081     0.1572 0.7000  1.3162   6.413 1.43e-10 *** #> M = 0.88        .          . 0.0000  2.2872       .        .     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"}]
